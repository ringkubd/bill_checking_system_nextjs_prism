datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  Authenticator Authenticator[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?  @db.Text
  refresh_token_expires_in Int?
  user                     User?    @relation(fields: [userId], references: [id])
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique

  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tsp {
  id         Int      @id @default(autoincrement())
  short_name String
  full_name  String
  group      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Batch      Batch[]
}

model Course {
  id              Int      @id @default(autoincrement())
  course_code     String
  course_name     String
  course_duration Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  Batch Batch[]
}

model Batch {
  id         Int       @id @default(autoincrement())
  batch_id   String    @unique
  round      Int
  course_id  Int
  tsp_id     Int
  start_date DateTime
  end_date   DateTime?
  completed  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  tsp    Tsp    @relation(fields: [tsp_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model Round {
  id         Int      @id @default(autoincrement())
  round      Int
  category   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
